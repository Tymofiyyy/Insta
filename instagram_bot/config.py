"""
–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è Instagram Bot
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
import shutil


class BotConfig:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –±–æ—Ç–∞"""
    
    def __init__(self, config_file: str = "bot_config.json"):
        self.config_file = config_file
        self.backup_dir = "config_backups"
        self.config = self.load_config()
        self.ensure_backup_directory()
    
    def ensure_backup_directory(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è backup'—ñ–≤"""
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        default_config = self.get_default_config()
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    
                # –ó–ª–∏—Ç—Ç—è –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
                merged_config = self.merge_configs(default_config, loaded_config)
                
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
                if self.validate_config(merged_config):
                    return merged_config
                else:
                    logging.warning("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É")
                    return default_config
            else:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
                self.save_config(default_config)
                logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {self.config_file}")
                
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            logging.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é")
        
        return default_config
    
    def get_default_config(self) -> Dict[str, Any]:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è"""
        return {
            "version": "2.0.0",
            "created_at": datetime.now().isoformat(),
            
            # API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            "captcha_api_key": "",
            "captcha_service": "2captcha",  # 2captcha, anticaptcha
            
            # –ü—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            "proxy_list": [],
            "proxy_rotation": True,
            "proxy_timeout": 10,
            
            # –õ—ñ–º—ñ—Ç–∏ –±–µ–∑–ø–µ–∫–∏
            "max_accounts": 10,
            "daily_action_limit": 80,
            "hourly_action_limit": 15,
            "max_errors_per_account": 3,
            "cooldown_after_error": 1800,  # 30 —Ö–≤–∏–ª–∏–Ω
            
            # –ó–∞—Ç—Ä–∏–º–∫–∏ (—Å–µ–∫—É–Ω–¥–∏)
            "action_delays": {
                "like": [2, 5],
                "comment": [3, 8],
                "follow": [4, 10],
                "unfollow": [3, 7],
                "story_view": [1, 3],
                "story_reply": [2, 6],
                "direct_message": [5, 12],
                "page_load": [3, 7],
                "between_actions": [8, 15],
                "between_targets": [15, 45],
                "between_accounts": [120, 300]
            },
            
            # User Agents –¥–ª—è –æ–±—Ö–æ–¥—É –¥–µ—Ç–µ–∫—Ü—ñ—ó
            "user_agents": [
                "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
                "Mozilla/5.0 (Linux; Android 12; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Mobile Safari/537.36",
                "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Mobile Safari/537.36",
                "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1",
                "Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Mobile Safari/537.36"
            ],
            
            # –†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –µ–∫—Ä–∞–Ω—É –¥–ª—è –µ–º—É–ª—è—Ü—ñ—ó –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
            "screen_resolutions": [
                [375, 812],  # iPhone X/11/12/13
                [414, 896],  # iPhone XR/11/12/13 Pro Max
                [390, 844],  # iPhone 12/13 mini
                [360, 640],  # Samsung Galaxy S
                [375, 667],  # iPhone 6/7/8
                [412, 869],  # Pixel
                [414, 736]   # iPhone Plus
            ],
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä—ñ—Å
            "story_replies": [
                "üî•üî•üî•", "‚ù§Ô∏è", "–ö—Ä—É—Ç–æ!", "üëç", "–°—É–ø–µ—Ä!", "üíØ", "üôå", 
                "–ö–ª–∞—Å–Ω–æ!", "üëè", "Wow!", "–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!", "–¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç!", 
                "–ö—Ä–∞—Å–∏–≤–æ!", "üòç", "ü§©", "üí™", "‚ú®", "üéâ", "üëå", "üî•",
                "–ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ!", "–í–∞—É!", "–®–∏–∫–∞—Ä–Ω–æ!", "–ë–æ–º–±–∞!", "üëë", 
                "–û–±–æ–∂–Ω—é—é!", "–ß—É–¥–æ–≤–æ!", "–ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è!", "üöÄ", "üí´"
            ],
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–∏—Ä–µ–∫—Ç
            "direct_messages": [
                "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? üòä",
                "–í—ñ—Ç–∞—é! –°–ø–æ–¥–æ–±–∞–≤—Å—è –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç üëç",
                "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –¶—ñ–∫–∞–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å ‚ú®",
                "–ü—Ä–∏–≤—ñ—Ç! –ö—Ä—É—Ç—ñ –ø–æ—Å—Ç–∏ —É –≤–∞—Å ‚ù§Ô∏è",
                "–í—ñ—Ç–∞—é! –î—è–∫—É—é –∑–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è üôå",
                "–ü—Ä–∏–≤—ñ—Ç! –ß—É–¥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç üî•",
                "–í—ñ—Ç–∞—é! –î—É–∂–µ —Ü—ñ–∫–∞–≤–æ üíØ",
                "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ö–ª–∞—Å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å üëå",
                "–ü—Ä–∏–≤—ñ—Ç! –î—É–∂–µ –∫—Ä—É—Ç–æ –≤–∏–≥–ª—è–¥–∞—î üòç",
                "–í—ñ—Ç–∞—é! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ üöÄ"
            ],
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            "automation_settings": {
                "run_schedule": "09:00-22:00",
                "days_of_week": [1, 2, 3, 4, 5],  # –ü–æ–Ω–µ–¥—ñ–ª–æ–∫-–ü'—è—Ç–Ω–∏—Ü—è
                "break_duration": [30, 120],  # —Ö–≤–∏–ª–∏–Ω–∏
                "max_actions_per_session": 50,
                "session_duration": [60, 180],  # —Ö–≤–∏–ª–∏–Ω–∏
                "rotate_accounts": True,
                "use_proxy_rotation": True,
                "randomize_order": True,
                "respect_rate_limits": True,
                "auto_retry_failed": True,
                "retry_count": 2,
                "retry_delay": [300, 600]  # —Å–µ–∫—É–Ω–¥–∏
            },
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
            "safety_settings": {
                "check_shadowban": True,
                "avoid_suspicious_behavior": True,
                "randomize_actions": True,
                "human_like_delays": True,
                "monitor_account_health": True,
                "auto_pause_on_errors": True,
                "max_daily_follows": 50,
                "max_daily_unfollows": 50,
                "max_daily_likes": 300,
                "max_daily_comments": 50,
                "max_daily_stories": 100,
                "max_daily_dms": 20
            },
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –æ–±—Ö–æ–¥—É –¥–µ—Ç–µ–∫—Ü—ñ—ó
            "selectors": {
                "login": {
                    "username_field": "input[name='username']",
                    "password_field": "input[name='password']",
                    "login_button": "button[type='submit']"
                },
                "posts": {
                    "post_links": "article a[href*='/p/']",
                    "like_button": "svg[aria-label='Like']",
                    "liked_button": "svg[aria-label='Unlike']",
                    "close_button": "svg[aria-label='Close']"
                },
                "stories": {
                    "story_avatar": "canvas",
                    "like_button": "svg[aria-label='Like']",
                    "reply_field": "textarea[placeholder*='Send message']",
                    "send_button": "button[type='submit']",
                    "next_button": "button[aria-label='Next']"
                },
                "direct": {
                    "new_message_button": "svg[aria-label*='New message']",
                    "search_field": "input[placeholder*='Search']",
                    "message_field": "textarea[placeholder*='Message']",
                    "send_button": "button[type='submit']"
                },
                "popups": {
                    "notification_not_now": "button:contains('Not Now')",
                    "save_info_not_now": "button:contains('Not Now')",
                    "install_app_cancel": "button:contains('Cancel')",
                    "close_buttons": "svg[aria-label='Close'], button[aria-label='Close']"
                }
            },
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            "logging": {
                "level": "INFO",
                "file": "logs/instagram_bot.log",
                "max_file_size": 10485760,  # 10MB
                "backup_count": 5,
                "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            },
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GUI
            "gui_settings": {
                "theme": "modern",
                "window_size": [1200, 800],
                "auto_save": True,
                "auto_refresh": 30,  # —Å–µ–∫—É–Ω–¥–∏
                "show_notifications": True,
                "language": "uk"
            },
            
            # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            "advanced": {
                "use_undetected_chrome": True,
                "disable_images": True,
                "disable_css": False,
                "page_load_timeout": 30,
                "implicit_wait": 10,
                "retry_on_stale_element": True,
                "auto_accept_cookies": True,
                "clear_cache_interval": 24,  # –≥–æ–¥–∏–Ω
                "session_persistence": True
            }
        }
    
    def merge_configs(self, default: Dict, loaded: Dict) -> Dict:
        """–ó–ª–∏—Ç—Ç—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—ó"""
        merged = default.copy()
        
        for key, value in loaded.items():
            if key in merged:
                if isinstance(value, dict) and isinstance(merged[key], dict):
                    merged[key] = self.merge_configs(merged[key], value)
                else:
                    merged[key] = value
            else:
                merged[key] = value
        
        return merged
    
    def validate_config(self, config: Dict) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            required_fields = [
                'action_delays', 'daily_action_limit', 'automation_settings',
                'safety_settings', 'user_agents', 'story_replies'
            ]
            
            for field in required_fields:
                if field not in config:
                    logging.error(f"–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: {field}")
                    return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Ç—Ä–∏–º–æ–∫
            delays = config.get('action_delays', {})
            for action, delay_range in delays.items():
                if not isinstance(delay_range, list) or len(delay_range) != 2:
                    logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è {action}")
                    return False
                if delay_range[0] > delay_range[1]:
                    logging.error(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –±—ñ–ª—å—à–∞ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–ª—è {action}")
                    return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤
            daily_limit = config.get('daily_action_limit', 0)
            if not isinstance(daily_limit, int) or daily_limit <= 0:
                logging.error("–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ
            proxy_list = config.get('proxy_list', [])
            for proxy in proxy_list:
                if not self.validate_proxy_format(proxy):
                    logging.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å—ñ: {proxy}")
            
            return True
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return False
    
    def validate_proxy_format(self, proxy: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –ø—Ä–æ–∫—Å—ñ"""
        import re
        patterns = [
            r'^(\d{1,3}\.){3}\d{1,3}:\d{1,5}$',  # ip:port
            r'^(\d{1,3}\.){3}\d{1,3}:\d{1,5}:\w+:\w+$',  # ip:port:user:pass
            r'^[\w\.-]+:\d{1,5}$',  # domain:port
            r'^[\w\.-]+:\d{1,5}:\w+:\w+$'  # domain:port:user:pass
        ]
        return any(re.match(pattern, proxy) for pattern in patterns)
    
    def save_config(self, config: Dict[str, Any] = None):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ backup"""
        if config is None:
            config = self.config
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            if os.path.exists(self.config_file):
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                backup_file = os.path.join(self.backup_dir, f"config_backup_{timestamp}.json")
                shutil.copy2(self.config_file, backup_file)
                logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ backup –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {backup_file}")
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            logging.info(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {self.config_file}")
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def get(self, key: str, default=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        keys = key.split('.')
        value = self.config
        
        try:
            for k in keys:
                value = value[k]
            return value
        except (KeyError, TypeError):
            return default
    
    def set(self, key: str, value: Any):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        keys = key.split('.')
        config = self.config
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        for k in keys[:-1]:
            if k not in config:
                config[k] = {}
            config = config[k]
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è
        config[keys[-1]] = value
        self.save_config()
    
    def get_story_replies(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Å—Ç–æ—Ä—ñ—Å"""
        return self.config.get('story_replies', [])
    
    def get_direct_messages(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø—Ä—è–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        return self.config.get('direct_messages', [])
    
    def get_automation_settings(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        return self.config.get('automation_settings', {})
    
    def get_safety_settings(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏"""
        return self.config.get('safety_settings', {})
    
    def get_action_delays(self) -> Dict[str, List[int]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ –¥–ª—è –¥—ñ–π"""
        return self.config.get('action_delays', {})
    
    def get_user_agents(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É User-Agent'—ñ–≤"""
        return self.config.get('user_agents', [])
    
    def get_screen_resolutions(self) -> List[List[int]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—å–Ω–∏—Ö –∑–¥–∞—Ç–Ω–æ—Å—Ç–µ–π –µ–∫—Ä–∞–Ω—É"""
        return self.config.get('screen_resolutions', [])
    
    def get_selectors(self, category: str = None) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤"""
        selectors = self.config.get('selectors', {})
        if category:
            return selectors.get(category, {})
        return selectors
    
    def add_proxy(self, proxy: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –¥–æ —Å–ø–∏—Å–∫—É"""
        if self.validate_proxy_format(proxy):
            if 'proxy_list' not in self.config:
                self.config['proxy_list'] = []
            
            if proxy not in self.config['proxy_list']:
                self.config['proxy_list'].append(proxy)
                self.save_config()
                return True
        return False
    
    def remove_proxy(self, proxy: str):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ –∑—ñ —Å–ø–∏—Å–∫—É"""
        if 'proxy_list' in self.config and proxy in self.config['proxy_list']:
            self.config['proxy_list'].remove(proxy)
            self.save_config()
            return True
        return False
    
    def add_story_reply(self, reply: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ—Å"""
        if reply and reply not in self.config.get('story_replies', []):
            if 'story_replies' not in self.config:
                self.config['story_replies'] = []
            self.config['story_replies'].append(reply)
            self.save_config()
    
    def add_direct_message(self, message: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø—Ä—è–º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if message and message not in self.config.get('direct_messages', []):
            if 'direct_messages' not in self.config:
                self.config['direct_messages'] = []
            self.config['direct_messages'].append(message)
            self.save_config()
    
    def export_config(self, file_path: str) -> bool:
        """–ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            logging.info(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞: {file_path}")
            return True
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return False
    
    def import_config(self, file_path: str) -> bool:
        """–Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                imported_config = json.load(f)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            if self.validate_config(imported_config):
                # –ó–ª–∏—Ç—Ç—è –∑ –ø–æ—Ç–æ—á–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
                self.config = self.merge_configs(self.config, imported_config)
                self.save_config()
                logging.info(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞: {file_path}")
                return True
            else:
                logging.error("–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é")
                return False
                
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return False
    
    def reset_to_defaults(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        self.config = self.get_default_config()
        self.save_config()
        logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∫–∏–Ω—É—Ç–∞ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
    
    def get_config_summary(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–≥–ª—è–¥—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        return {
            'version': self.config.get('version', 'Unknown'),
            'total_proxies': len(self.config.get('proxy_list', [])),
            'daily_action_limit': self.config.get('daily_action_limit', 0),
            'total_story_replies': len(self.config.get('story_replies', [])),
            'total_direct_messages': len(self.config.get('direct_messages', [])),
            'captcha_api_configured': bool(self.config.get('captcha_api_key', '')),
            'safety_mode': self.config.get('safety_settings', {}).get('avoid_suspicious_behavior', False),
            'auto_rotation': self.config.get('automation_settings', {}).get('rotate_accounts', False)
        }
    
    def cleanup_old_backups(self, max_backups: int = 10):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup'—ñ–≤"""
        try:
            if not os.path.exists(self.backup_dir):
                return
            
            backup_files = []
            for filename in os.listdir(self.backup_dir):
                if filename.startswith('config_backup_') and filename.endswith('.json'):
                    file_path = os.path.join(self.backup_dir, filename)
                    backup_files.append((file_path, os.path.getmtime(file_path)))
            
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            backup_files.sort(key=lambda x: x[1], reverse=True)
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup'—ñ–≤
            for file_path, _ in backup_files[max_backups:]:
                try:
                    os.remove(file_path)
                    logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π backup: {file_path}")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è backup {file_path}: {e}")
                    
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è backup'—ñ–≤: {e}")
    
    def get_config_validation_report(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        report = {
            'valid': True,
            'errors': [],
            'warnings': [],
            'recommendations': []
        }
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏
            daily_limit = self.config.get('daily_action_limit', 0)
            if daily_limit > 150:
                report['warnings'].append(f"–í–∏—Å–æ–∫–∏–π –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç ({daily_limit}) –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
            elif daily_limit > 200:
                report['errors'].append(f"–ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∏—Å–æ–∫–∏–π –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç ({daily_limit})")
                report['valid'] = False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Ç—Ä–∏–º–æ–∫
            delays = self.config.get('action_delays', {})
            for action, delay_range in delays.items():
                if delay_range[0] < 1:
                    report['warnings'].append(f"–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è {action}")
                if delay_range[1] - delay_range[0] < 1:
                    report['recommendations'].append(f"–ó–±—ñ–ª—å—à—ñ—Ç—å —Ä–æ–∑–±—ñ–≥ –∑–∞—Ç—Ä–∏–º–æ–∫ –¥–ª—è {action}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ
            proxy_count = len(self.config.get('proxy_list', []))
            if proxy_count == 0:
                report['warnings'].append("–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä—ñ–≤")
            elif proxy_count < 3:
                report['recommendations'].append("–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä—ñ–≤")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á–∞ –∫–∞–ø—á—ñ
            if not self.config.get('captcha_api_key'):
                report['warnings'].append("–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ API –∫–ª—é—á –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∫–∞–ø—á—ñ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            story_replies_count = len(self.config.get('story_replies', []))
            if story_replies_count < 10:
                report['recommendations'].append("–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Å—Ç–æ—Ä—ñ—Å")
            
            dm_count = len(self.config.get('direct_messages', []))
            if dm_count < 5:
                report['recommendations'].append("–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —à–∞–±–ª–æ–Ω—ñ–≤ –ø—Ä—è–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            
        except Exception as e:
            report['errors'].append(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
            report['valid'] = False
        
        return report
